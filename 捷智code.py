{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6978c48f-48f5-419a-bf42-32521b2e4f49",
   "metadata": {
    "tags": []
   },
   "source": [
    "# load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7ea989b-7444-49bb-9818-c8ee10b44f41",
   "metadata": {},
   "outputs": [],
   "source": [
    "%run ./function.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "973e817d-1015-4ac6-87bd-6a2d099d006a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alert_id', 'run_date', 'primary_entity_level_code',\n",
       "       'primary_entity_number', 'scenario_name', 'TO_SAR', 'Acct_No',\n",
       "       'Cust_No', 'Cust_Key', 'Cust_Segmentation', 'Cust_Typ_Cd', 'Cust_Id_Id',\n",
       "       'Cust_Id_Typ_Desc', 'Cust_Id_State_Cd', 'Cust_Dt_Of_Birth',\n",
       "       'Cust_Sts_Desc', 'Street_Postal_Cd', 'Street_Cntry_Cd',\n",
       "       'Mailing_Postal_Cd', 'Mailing_Cntry_Cd', 'Residence_Cntry_Cd',\n",
       "       'Citizenship_Cntry_Cd', 'Org_Cntry_Of_Buz_Cd', 'Empl_No', 'Ocup_Code',\n",
       "       'job_title_code', 'Lst_Cont_Dt', 'Politically_Exposed_Pers_Ind',\n",
       "       'Non_Prft_Org_Ind', 'Cust_Since_Dt', 'Lst_Susp_Actv_Rpt_Dt',\n",
       "       'Extnl_Cust_Ind', 'Negative_News_Ind', 'Prim_Br_No', 'Obu_Ind',\n",
       "       'Riskclass_Cd', 'risk_score', 'last_risk_assessment_date',\n",
       "       'change_current_ind', 'change_begin_date', 'change_end_date',\n",
       "       'Credit_Amt', 'number_of_Credit', 'Debit_Amt', 'number_of_Debit'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PATH = 'D:/Temp/NCTU/crystal/第二階段/new_alert/日數分類_營業日/'\n",
    "FILE = 'TWN_A11_01_day15_with_aggregated_txn_scenario_txn_type_key_營業日.csv'\n",
    "df = pd.read_csv(PATH + FILE)\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1c5ae6b-43cd-4b7b-b1d4-368c699a25e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['TO_SAR'] = df['TO_SAR'].replace(np.nan, 0)\n",
    "df['TO_SAR'] = df['TO_SAR'].replace('F', 1)\n",
    "df['TO_SAR'] = df['TO_SAR'].replace('NF', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "88a011bb-c383-4884-87f2-fb40d3c9d13b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    86324\n",
       "1      446\n",
       "Name: TO_SAR, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['TO_SAR'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64ee5317-7d37-49e3-bfe4-c2425377bea0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Verify on time series\n",
      "shape of data: (86770, 39)\n",
      "total number of TO_SAR: 446\n",
      "********************************\n",
      "time interval in train set:2019-03-04~2020-04-29\n",
      "TO_SAR in train set: 267\n",
      "TO_SAR/Total in train set 0.005128599143312653\n",
      "split dataset to train, test...\n",
      "********************************\n",
      "time interval in test set:2020-02-19~2020-12-31\n",
      "TO_SAR in test set: 179\n",
      "TO_SAR/Total in test set 0.0051571638479933155\n",
      "********************************\n",
      "train data shape:  (52061, 38)\n",
      "test data shape:  (34709, 38)\n"
     ]
    }
   ],
   "source": [
    "SAR_type = 'TO_SAR'\n",
    "train_set, test_set = ReadFile(df, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "45e429c2-138b-4b61-bb5f-2387870db4ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "SAR = train_set[train_set.TO_SAR!= 0]\n",
    "Non_SAR = train_set[train_set.TO_SAR== 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6f3ef89-df73-4438-9fb0-502895df2741",
   "metadata": {
    "tags": []
   },
   "source": [
    "# function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "41ea2080-2fdd-4474-90c7-902de87e33ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "def intialPoint(feature, data):\n",
    "    return data[feature][np.random.randint(0, len(data))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "acdf5eab-601c-459b-84aa-9f599d276d05",
   "metadata": {},
   "outputs": [],
   "source": [
    "def conditionalEntropy(new_sam_0, new_sam_1):\n",
    "    total = len(new_sam_1) + len(new_sam_0)\n",
    "    return Entropy(new_sam_0, SAR_type) * (len(new_sam_0) / total) \\\n",
    "            + Entropy(new_sam_1, SAR_type) * (len(new_sam_1) / total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ba93f032-e6d6-49bc-9b09-952540b04408",
   "metadata": {},
   "outputs": [],
   "source": [
    "def informationGain(x_thre, y_thre, x_name, y_name, data):\n",
    "    \n",
    "    idx1 = set(data[data[x_name] >= x_thre].index)\n",
    "    idx2 = set(data[data[y_name] >= y_thre].index)\n",
    "    \n",
    "    #idx3 = set(data[data[y_name] >= float(y_thre)].index)\n",
    "    \n",
    "    idx = list(idx1 & idx2)\n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new sam 0 and new sam 1 are overlapped')\n",
    "        \n",
    "    return -(father_entropy - conditionalEntropy(new_sam_0, new_sam_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "59de65d8-712c-4c14-a33c-0bf72bc34791",
   "metadata": {},
   "outputs": [],
   "source": [
    "def recallFilterRate(x_thre, y_thre, x_name, y_name, data):\n",
    "    idx1 = set(data[data[x_name] > x_thre].index)\n",
    "    idx2 = set(data[data[y_name] > y_thre].index)\n",
    "    \n",
    "    idx = list(idx1 & idx2)\n",
    "    \n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new_sam_1 and new_sam_0 are voerlapped')\n",
    "        \n",
    "    TP = new_sam_1[new_sam_1[SAR_type] != 0].shape[0]\n",
    "    TN = new_sam_0[new_sam_0[SAR_type] == 0].shape[0]\n",
    "    FP = new_sam_1[new_sam_1[SAR_type] == 0].shape[0]\n",
    "    FN = new_sam_0[new_sam_0[SAR_type] != 0].shape[0]\n",
    "    \n",
    "    recall = TP / (TP + FN)\n",
    "    filter_rate = (TP + FP) / (TP + TN + FP + FN)\n",
    "    \n",
    "    return recall, filter_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca8b9dd0",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Newton Method"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a72aea",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## original version\n",
    "2022/10/12 加入 backtracking line search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ae8ddd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def finiteDifferenceIG(x1, y1, x_name, y_name, data):\n",
    "    x2 = data.loc[data[x_name] > x1, x_name].reset_index(drop= True)[90]\n",
    "    y2 = data.loc[data[y_name] > y1, y_name].reset_index(drop= True)[0]\n",
    "    print(f'x1:{x1}, y1:{y1}')\n",
    "    print(f'x2:{x2}, y2:{y2}')\n",
    "    delta_x = x2 - x1\n",
    "    delta_y = y2 - y1\n",
    "    \n",
    "    z = informationGain(x1, y1, x_name, y_name, data)\n",
    "    z_delta_x = informationGain(x1 + delta_x, y1, x_name, y_name, data)\n",
    "    z_delta_y = informationGain(x1, y1 + delta_y, x_name, y_name, data)\n",
    "    z_delta_2x = informationGain(x1 + delta_x * 2, y1, x_name, y_name, data)\n",
    "    z_delta_2y = informationGain(x1, y1 + delta_y * 2, x_name, y_name, data)\n",
    "    z_delta_xy = informationGain(x1 + delta_x, y1 + delta_y, x_name, y_name, data)\n",
    "    \n",
    "    grad = np.array([(z_delta_x - z) / delta_x, (z_delta_y - z) / delta_y])\n",
    "    hessian = np.array([[(z_delta_2x - z_delta_x * 2 + z) / (delta_x * delta_x), (z_delta_xy - z_delta_x - z_delta_y + z) / (delta_x * delta_y)], \\\n",
    "                       [(z_delta_xy - z_delta_x - z_delta_y + z) / (delta_x * delta_y), (z_delta_2y - z_delta_y * 2 + z) / (delta_y * delta_y)]])\n",
    "    \n",
    "    return grad, hessian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1df9f844",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Newton(x1, y1, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', 'information gain', 'recall', 'filter rate'])\n",
    "    n = 1\n",
    "    while n < N_max:\n",
    "        grads, hessian = finiteDifferenceIG(x1, y1, x_name, y_name, data)\n",
    "        print(f'gradient: {grads}')\n",
    "        print(f'hessian matrix:\\n{hessian}')\n",
    "        \n",
    "        if np.linalg.det(hessian) == 0:\n",
    "            raise ValueError('hessian matirx is singular matrix, can not invertible')\n",
    "        \n",
    "        temp_point = np.array([[x1], [y1]]) - step_size * np.linalg.inv(hessian) @ grads\n",
    "    \n",
    "        information_gain = informationGain(new_points[0], new_points[1], x_name, y_name, data)\n",
    "        recall, filter_rate = recallFilterRate(new_points[0], new_points[1], x_name, y_name, data)\n",
    "    \n",
    "        results = results.append({'iteration number': n, 'x1':x1, 'y1':y1, 'new x1': new_points[0], 'new y1': new_points[1], 'information gain':information_gain, \\\n",
    "                                  'recall':recall, 'filter rate': filter_rate}, ignore_index= True)\n",
    "    \n",
    "        if np.linalg.norm(grads, 2) < eplison:\n",
    "            print('Early stopping' + '------' * 8 + f'\\niteration number:{n} new x1:{new_points[0]}, new y1:{new_points[1]}')\n",
    "            break\n",
    "            \n",
    "            \n",
    "        x1 = new_points[0]\n",
    "        y1 = new_points[1]\n",
    "        n += 1\n",
    "    \n",
    "    print('Finish' + '-----' * 8 + f'\\niteration number:{n} new x1: {new_points[0]}, new y1: {new_points[1]}')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e07282c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eplison = 1e-10\n",
    "N_max = 1000\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "383b417a",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1:0.0, y1:0.0\n",
      "x2:100000.0, y2:1.0\n",
      "gradient: [8.20844399e-09 8.30795366e-04]\n",
      "hessian matrix:\n",
      "[[-9.19043979e-14 -8.30795366e-09]\n",
      " [-8.30795366e-09 -1.00183186e-03]]\n",
      "x1:57320.324679250654, y1:0.3539324101496293\n",
      "x2:172300.0, y2:1.0\n",
      "gradient: [-6.1026367e-10  0.0000000e+00]\n",
      "hessian matrix:\n",
      "[[ 1.18154527e-15  0.00000000e+00]\n",
      " [ 0.00000000e+00 -2.92725679e-04]]\n",
      "x1:573816.5466547816, y1:0.3539324101496293\n",
      "x2:1010000.0, y2:1.0\n",
      "gradient: [8.51692999e-11 0.00000000e+00]\n",
      "hessian matrix:\n",
      "[[-2.35000646e-15  0.00000000e+00]\n",
      " [ 0.00000000e+00 -7.32775801e-05]]\n",
      "Early stopping------------------------------------------------\n",
      "new x1: 610058.7023463736, new y1: 0.3539324101496293\n",
      "Finish----------------------------------------\n",
      "new x1: 610058.7023463736, new y1: 0.3539324101496293\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(1022)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    #print(f'x1:{x1}, y1:{y1}')\n",
    "    results = Newton(x1, y1, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "d5ac8a6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "      <th>y1</th>\n",
       "      <th>new x1</th>\n",
       "      <th>new y1</th>\n",
       "      <th>information gain</th>\n",
       "      <th>recall</th>\n",
       "      <th>filter rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.424185</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.758196</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.758196</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.087476</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.010853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.087476</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.391699</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.391699</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.726171</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.726171</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.055904</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.010853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.055904</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.359168</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.359168</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.694101</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.694101</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.024288</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.010853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>63.024288</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.326593</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.326593</td>\n",
       "      <td>224704.739396</td>\n",
       "      <td>62.661987</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.007491</td>\n",
       "      <td>0.011448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                x1         y1         new x1     new y1  information gain  \\\n",
       "989  224704.739396  62.424185  224704.739396  62.758196          0.000006   \n",
       "990  224704.739396  62.758196  224704.739396  63.087476          0.000004   \n",
       "991  224704.739396  63.087476  224704.739396  62.391699          0.000006   \n",
       "992  224704.739396  62.391699  224704.739396  62.726171          0.000006   \n",
       "993  224704.739396  62.726171  224704.739396  63.055904          0.000004   \n",
       "994  224704.739396  63.055904  224704.739396  62.359168          0.000006   \n",
       "995  224704.739396  62.359168  224704.739396  62.694101          0.000006   \n",
       "996  224704.739396  62.694101  224704.739396  63.024288          0.000004   \n",
       "997  224704.739396  63.024288  224704.739396  62.326593          0.000006   \n",
       "998  224704.739396  62.326593  224704.739396  62.661987          0.000006   \n",
       "\n",
       "       recall  filter rate  \n",
       "989  0.007491     0.011448  \n",
       "990  0.007491     0.010853  \n",
       "991  0.007491     0.011448  \n",
       "992  0.007491     0.011448  \n",
       "993  0.007491     0.010853  \n",
       "994  0.007491     0.011448  \n",
       "995  0.007491     0.011448  \n",
       "996  0.007491     0.010853  \n",
       "997  0.007491     0.011448  \n",
       "998  0.007491     0.011448  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.tail(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c595dd00-5df5-4332-8dcb-8794709bf343",
   "metadata": {
    "tags": []
   },
   "source": [
    "## new BFGS\n",
    "2022/10/19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "1cc21950-345f-4642-94ae-1d92ad626bde",
   "metadata": {},
   "outputs": [],
   "source": [
    "def informationGain(point, x_name, y_name, data):\n",
    "    \n",
    "    idx1 = set(data[data[x_name] >= float(point[0])].index)\n",
    "    idx2 = set(data[data[y_name] >= float(point[1])].index)\n",
    "    \n",
    "    #idx3 = set(data[data[y_name] >= float(y_thre)].index)\n",
    "    \n",
    "    idx = list(idx1 & idx2)\n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new sam 0 and new sam 1 are overlapped')\n",
    "        \n",
    "    return -(father_entropy - conditionalEntropy(new_sam_0, new_sam_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f10137e5-c339-4ac2-ab9d-f04430045231",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = train_set\n",
    "point = np.array([[], []])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "id": "b596d40e-4d8d-41db-a810-9b98093f6bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientIG(point, x_name, y_name, data):\n",
    "    x1 = float(point[0])\n",
    "    y1 = float(point[1])\n",
    "\n",
    "    # x2 = auxiliaryPoint(point[0], x_name, number_x, train_set)\n",
    "    # y2 = auxiliaryPoint(point[1], y_name, number_y, train_set)\n",
    "    if pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).shape[0] == auxiliary_point_select_behind_x or \\\n",
    "            pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).shape[0] == auxiliary_point_select_behind_y:\n",
    "        print('auxiliary point can not be found!')\n",
    "        print(pd.DataFrame(np.unique(data[data[x_name] > float(point[0])][x_name])).sort_values(by= 0).shape[0])\n",
    "        print(pd.DataFrame(np.unique(data[data[y_name] > float(point[1])][y_name])).sort_values(by= 0).shape[0])\n",
    "        raise ValueError(\"auxiliary point can't be find\")\n",
    "        #return np.array([[np.nan], [np.nan]])\n",
    "        \n",
    "    x2 = pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).sort_values(by= 0).iloc[0, 0]\n",
    "    y2 = pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).sort_values(by= 0).iloc[0, 0]\n",
    "    \n",
    "    delta_x = x2 - float(point[0])\n",
    "    delta_y = y2 - float(point[1])\n",
    "    \n",
    "    z = informationGain(point, x_name, y_name, data)\n",
    "    z_delta_x = informationGain(np.array([[x2], [y1]]), x_name, y_name, data)\n",
    "    z_delta_y = informationGain(np.array([[x1], [y2]]), x_name, y_name, data)\n",
    "    \n",
    "    grad = np.array([[(z_delta_x - z) / delta_x], [(z_delta_y - z) / delta_y]])\n",
    "    return grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "5a2e354a-f803-43a6-a940-2dd7775b3f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "def auxiliaryPoint(point, feature, number, data):\n",
    "    delta = (data[feature].max() - data[feature].min()) / number\n",
    "    \n",
    "    return point + delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "640fd83b-d3cf-42cc-8d0c-039968d1a84e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lineSearch(point, update_direction, grads, data):\n",
    "    a = 1\n",
    "    c1 = 1e-4\n",
    "    c2 = 0.9\n",
    "    z = informationGain(point, x_name, y_name, data)\n",
    "    new_point = point + a * update_direction\n",
    "    new_grads = gradientIG(point, x_name, y_name, data)\n",
    "    new_z = informationGain(new_point, x_name, y_name, data)\n",
    "    print(f'before loop')\n",
    "    while (new_z >= z + (c1 * a * grads.T @ update_direction)) or (new_grads.T @ update_direction <= c2 * (grads.T @ update_direction)):\n",
    "        a *= 0.5\n",
    "        new_point = point + a * update_direction\n",
    "        new_grads = gradientIG(new_point, x_name, y_name, data)\n",
    "        \n",
    "    return a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "f143fe35-8b70-4967-9a78-59b9574a1f89",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Recall(point, x_name, y_name, data):\n",
    "    idx1 = set(data[data[x_name] > float(point[0])].index)\n",
    "    idx2 = set(data[data[y_name] > float(point[1])].index)\n",
    "    idx = list(idx1 & idx2)\n",
    "    \n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new sam 1 and new sam 0 are overlapped')\n",
    "    \n",
    "    TP = new_sam_1[new_sam_1[SAR_type] != 0].shape[0]\n",
    "    TN = new_sam_0[new_sam_0[SAR_type] == 0].shape[0]\n",
    "    FP = new_sam_1[new_sam_1[SAR_type] == 0].shape[0]\n",
    "    FN = new_sam_0[new_sam_0[SAR_type] != 0].shape[0]\n",
    "    \n",
    "    return -(TP / (TP + FN))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "f603cf71-20ec-4386-9359-91cc0a23dad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def RecallFilterRate(point, x_name, y_name, data):\n",
    "    idx1 = set(data[data[x_name] > float(point[0])].index)\n",
    "    idx2 = set(data[data[y_name] > float(point[1])].index)\n",
    "    \n",
    "    idx = list(idx1 & idx2)\n",
    "    \n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new_sam_1 and new_sam_0 are voerlapped')\n",
    "        \n",
    "    TP = new_sam_1[new_sam_1[SAR_type] != 0].shape[0]\n",
    "    TN = new_sam_0[new_sam_0[SAR_type] == 0].shape[0]\n",
    "    FP = new_sam_1[new_sam_1[SAR_type] == 0].shape[0]\n",
    "    FN = new_sam_0[new_sam_0[SAR_type] != 0].shape[0]\n",
    "    \n",
    "    recall = TP / (TP + FN)\n",
    "    filter_rate = (TP + FP) / (TP + TN + FP + FN)\n",
    "    \n",
    "    return recall, filter_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "950faca2-15e7-45d4-8be2-e52b226e9f3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def BFGS(point0, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', \\\n",
    "                                     'information gain', 'recall', 'filter rate'])\n",
    "    d = 2\n",
    "    grads = gradientIG(point0, x_name, y_name, data)\n",
    "    H = np.eye(d)\n",
    "    point = point0\n",
    "    n = 0\n",
    "    \n",
    "    while np.linalg.norm(grads) > 1e-50:\n",
    "        if n > N_max:\n",
    "            print(f'Maximum iteration reached!')\n",
    "            break\n",
    "        \n",
    "        n += 1\n",
    "        update_direction = -H @ grads\n",
    "        #step_size = lineSearch(point, update_direction, grads, data)\n",
    "        print(f'update_direction:{update_direction}')\n",
    "        new_point = point + (step_size * update_direction)\n",
    "        new_grads = gradientIG(new_point, x_name, y_name, data)\n",
    "        \n",
    "        if np.isnan(new_grads).all() == True:\n",
    "            break\n",
    "        \n",
    "        print(f'new_grads:{new_grads}')\n",
    "        y = new_grads - grads\n",
    "        y = y.reshape((-1, 1))\n",
    "        s = new_point - point\n",
    "        denominator = 1 / (y.T @ s)\n",
    "        li = np.eye(d) - (denominator * (s @ s.T))\n",
    "        ri = np.eye(d) - (denominator * (y @ y.T))\n",
    "        H = li @ H @ ri + (denominator * (s @ s.T))\n",
    "        grads = new_grads\n",
    "        point = new_point\n",
    "        \n",
    "        information_gain = informationGain(point, x_name, y_name, data)\n",
    "        recall, filter_rate = RecallFilterRate(point, x_name, y_name, data)\n",
    "        \n",
    "        print(f'n={n}, new x1:{point[0]}, new y1: {point[1]},\\ninformation gain: {information_gain}, recall: {recall}, filter rate: {filter_rate}')\n",
    "        \n",
    "        results = results.append({'iteration number': n, 'x1': point[0], 'y1': point[1], 'new x1': new_point[0], \\\n",
    "                                 'new y1': new_point[1], 'information gain': information_gain, 'recall': recall, \\\n",
    "                                 'filter rate': filter_rate}, ignore_index= True)\n",
    "    \n",
    "    if np.linalg.norm(grads) < 1e-50:\n",
    "        print('Early stopping!')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "20bc27e0-3426-4e9a-a75a-9c978295fede",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eps = 1e-1000\n",
    "N_max = 100\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "number_x = 100\n",
    "number_y = 100\n",
    "step_size = np.array([[1e12], [1e6]])\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "9af1f362-bd75-4e1d-b062-b21258d62e37",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial  point x1:537664.0, y1:20.0\n",
      "update_direction:[[-1.92062062e-11]\n",
      " [-6.94914060e-06]]\n",
      "new_grads:[[0.00000000e+00]\n",
      " [1.62946394e-07]]\n",
      "n=1, new x1:[537644.79379384], new y1: [13.0508594],\n",
      "information gain: -7.77364399565661e-05, recall: 0.15355805243445692, filter rate: 0.21033018958529417\n",
      "update_direction:[[-4.50351739e-07]\n",
      " [-3.25891354e-07]]\n",
      "new_grads:[[0.0000000e+00]\n",
      " [2.4802424e-06]]\n",
      "n=2, new x1:[87293.05509946], new y1: [12.72496805],\n",
      "information gain: -7.875024363448307e-05, recall: 0.17228464419475656, filter rate: 0.2316513320912007\n",
      "update_direction:[[-1.84099986e+12]\n",
      " [-1.33221632e+06]]\n",
      "new_grads:[[-4.50723986e-28]\n",
      " [-5.22292037e-16]]\n",
      "n=3, new x1:[-1.84099986e+24], new y1: [-1.33221632e+12],\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "update_direction:[[-3.97659778e+44]\n",
      " [-2.87761481e+32]]\n",
      "new_grads:[[-2.08666514e-60]\n",
      " [-2.41799553e-42]]\n",
      "n=4, new x1:[-3.97659778e+56], new y1: [-2.87761481e+38],\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "update_direction:[[-1.62425565e+102]\n",
      " [-1.17537211e+084]]\n",
      "new_grads:[[-5.10869575e-118]\n",
      " [-5.91987822e-094]]\n",
      "n=5, new x1:[-1.62425565e+114], new y1: [-1.17537211e+90],\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "Early stopping!\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(928)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    print(f'initial  point x1:{x1}, y1:{y1}')\n",
    "    point = np.array([[x1], [y1]])\n",
    "    results = BFGS(point, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "fc5fcc28-f2d3-4cc2-8d2d-0f1a33bcd985",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration number</th>\n",
       "      <th>x1</th>\n",
       "      <th>y1</th>\n",
       "      <th>new x1</th>\n",
       "      <th>new y1</th>\n",
       "      <th>information gain</th>\n",
       "      <th>recall</th>\n",
       "      <th>filter rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>[537644.7937938389]</td>\n",
       "      <td>[13.050859400659652]</td>\n",
       "      <td>[537644.7937938389]</td>\n",
       "      <td>[13.050859400659652]</td>\n",
       "      <td>-7.773644e-05</td>\n",
       "      <td>0.153558</td>\n",
       "      <td>0.210330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>[87293.05509946408]</td>\n",
       "      <td>[12.724968046897066]</td>\n",
       "      <td>[87293.05509946408]</td>\n",
       "      <td>[12.724968046897066]</td>\n",
       "      <td>-7.875024e-05</td>\n",
       "      <td>0.172285</td>\n",
       "      <td>0.231651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>[-1.8409998618640174e+24]</td>\n",
       "      <td>[-1332216322724.714]</td>\n",
       "      <td>[-1.8409998618640174e+24]</td>\n",
       "      <td>[-1332216322724.714]</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>[-3.976597778731362e+56]</td>\n",
       "      <td>[-2.8776148111295557e+38]</td>\n",
       "      <td>[-3.976597778731362e+56]</td>\n",
       "      <td>[-2.8776148111295557e+38]</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>[-1.6242556545663026e+114]</td>\n",
       "      <td>[-1.175372111718084e+90]</td>\n",
       "      <td>[-1.6242556545663026e+114]</td>\n",
       "      <td>[-1.175372111718084e+90]</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  iteration number                          x1                         y1  \\\n",
       "0                1         [537644.7937938389]       [13.050859400659652]   \n",
       "1                2         [87293.05509946408]       [12.724968046897066]   \n",
       "2                3   [-1.8409998618640174e+24]       [-1332216322724.714]   \n",
       "3                4    [-3.976597778731362e+56]  [-2.8776148111295557e+38]   \n",
       "4                5  [-1.6242556545663026e+114]   [-1.175372111718084e+90]   \n",
       "\n",
       "                       new x1                     new y1  information gain  \\\n",
       "0         [537644.7937938389]       [13.050859400659652]     -7.773644e-05   \n",
       "1         [87293.05509946408]       [12.724968046897066]     -7.875024e-05   \n",
       "2   [-1.8409998618640174e+24]       [-1332216322724.714]     -1.424889e-07   \n",
       "3    [-3.976597778731362e+56]  [-2.8776148111295557e+38]     -1.424889e-07   \n",
       "4  [-1.6242556545663026e+114]   [-1.175372111718084e+90]     -1.424889e-07   \n",
       "\n",
       "     recall  filter rate  \n",
       "0  0.153558     0.210330  \n",
       "1  0.172285     0.231651  \n",
       "2  1.000000     0.999981  \n",
       "3  1.000000     0.999981  \n",
       "4  1.000000     0.999981  "
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b88b5c0e-9359-44b5-94ac-63c4f138ba82",
   "metadata": {},
   "source": [
    "## 加入邊界條件\n",
    "使用懲罰函數中的內點法，限制 x, y 必須為正，此時目標函數如下\n",
    "$$min IG(x, y)$$\n",
    "$$s.t. x\\geq0\\quad and\\quad y\\geq0$$\n",
    "內點法的概念是初始點在可行區域內，建立起一道高牆，當接近邊界時懲罰會大增，使後續更新無法離開可行解的區域內，常見的內點法的逞罰函數會取倒數或log\n",
    "$$min IG(x,y) + \\gamma(ln(x) + ln(y))$$\n",
    "另外x, y 上限受到training 資料影響，因為當越接近上限時，我們知道此時的資料幾乎會都分到 TO_SAM =0 的那類，filter rate 最大，但 recall 最低\n",
    "2022/10/19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "3875b787-f86d-4dc3-8ba7-dd751c559e98",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientPenalty(point):\n",
    "    return 1 / point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "70ebf271-0072-4c48-89bb-fa7ff29b9110",
   "metadata": {},
   "outputs": [],
   "source": [
    "def BFGSWithPenalty(point0, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', \\\n",
    "                                     'information gain', 'recall', 'filter rate'])\n",
    "    d = 2\n",
    "    gradIG = gradientIG(point0, x_name, y_name, data)\n",
    "    gradPenalty = gradientPenalty(point0)\n",
    "    grads = gradIG + (gradPenalty * gamma)\n",
    "    \n",
    "    H = np.eye(d)\n",
    "    point = point0\n",
    "    n = 0\n",
    "    \n",
    "    \n",
    "    \n",
    "    while np.linalg.norm(grads) > 1e-50:\n",
    "        if n > N_max:\n",
    "            print(f'Maximum iteration reached!')\n",
    "            break\n",
    "        \n",
    "        n += 1\n",
    "        update_direction = -H @ grads\n",
    "        #step_size = lineSearch(point, update_direction, grads, data)\n",
    "        print(f'update_direction:{update_direction}')\n",
    "        new_point = point + (step_size * update_direction)\n",
    "\n",
    "        information_gain = informationGain(new_point, x_name, y_name, data)\n",
    "        recall, filter_rate = RecallFilterRate(new_point, x_name, y_name, data)\n",
    "        print(f'n={n}, new x1:{float(new_point[0])}, new y1: {float(new_point[1])},\\ninformation gain: {information_gain}, recall: {recall}, filter rate: {filter_rate}')\n",
    "        \n",
    "        results = results.append({'iteration number': n, 'x1': float(point[0]), 'y1': float(point[1]), 'new x1': float(new_point[0]), \\\n",
    "                                 'new y1': float(new_point[1]), 'information gain': information_gain, 'recall': recall, \\\n",
    "                                 'filter rate': filter_rate}, ignore_index= True)        \n",
    "        \n",
    "        new_gradIG = gradientIG(new_point, x_name, y_name, data)\n",
    "        new_gradPenalty = gradientPenalty(new_point)\n",
    "        \n",
    "        new_grads = new_gradIG + (new_gradPenalty * gamma)\n",
    "        \n",
    "        if np.isnan(new_grads).all() == True:\n",
    "            break\n",
    "        print(f'new_gradIG:{new_gradIG}')\n",
    "        print(f'new_gradPenalty:{new_gradPenalty}')\n",
    "        \n",
    "        print(f'new_grads:{new_grads}')\n",
    "        \n",
    "        y = new_grads - grads\n",
    "        y = y.reshape((-1, 1))\n",
    "        s = new_point - point\n",
    "        denominator = 1 / (y.T @ s)\n",
    "        li = np.eye(d) - (denominator * (s @ s.T))\n",
    "        ri = np.eye(d) - (denominator * (y @ y.T))\n",
    "        H = li @ H @ ri + (denominator * (s @ s.T))\n",
    "        \n",
    "        gradIG = new_gradIG\n",
    "        gradPenalty = new_gradPenalty      \n",
    "        grads = new_grads\n",
    "        point = new_point\n",
    "        print(f'hessian matrix:{H}')\n",
    "        print('*******' * 8)\n",
    "        \n",
    "    if np.linalg.norm(grads) < 1e-50:\n",
    "        print('Early stopping!')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "e49c027d-1a8a-4464-a2bd-90d10554cd35",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eps = 1e-1000\n",
    "N_max = 100\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "# number_x = 100\n",
    "# number_y = 100\n",
    "#step_size = np.array([[1e12], [1e6]])\n",
    "step_size = 1\n",
    "gamma = 0.001\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "4854158e-ee7d-4bac-ba42-0cfca1f1df9b",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial  point x1:537664.0, y1:20.0\n",
      "update_direction:[[-1.87910384e-09]\n",
      " [-5.69491406e-05]]\n",
      "n=1, new x1:537663.9999999981, new y1: 19.9999430508594,\n",
      "information gain: -8.846741616871934e-05, recall: 0.0749063670411985, filter rate: 0.12224121703386412\n",
      "new_gradIG:[[ 0.00000000e+00]\n",
      " [-7.34560641e-07]]\n",
      "new_gradPenalty:[[1.85989763e-06]\n",
      " [5.00001424e-02]]\n",
      "new_grads:[[1.85989763e-09]\n",
      " [4.92655817e-05]]\n",
      "hessian matrix:[[1.00000000e+00 3.23699168e-05]\n",
      " [2.16239787e-06 1.86508034e+00]]\n",
      "********************************************************\n",
      "update_direction:[[-3.45462041e-09]\n",
      " [-9.18842678e-05]]\n",
      "n=2, new x1:537663.9999999946, new y1: 19.999851166591625,\n",
      "information gain: -8.846741616871934e-05, recall: 0.0749063670411985, filter rate: 0.12224121703386412\n",
      "new_gradIG:[[ 0.00000000e+00]\n",
      " [-7.34538144e-07]]\n",
      "new_gradPenalty:[[1.85989763e-06]\n",
      " [5.00003721e-02]]\n",
      "new_grads:[[1.85989763e-09]\n",
      " [4.92658339e-05]]\n",
      "hessian matrix:[[1.00002994e+00 1.19792354e+01]\n",
      " [7.87799084e-01 3.15166650e+05]]\n",
      "********************************************************\n",
      "update_direction:[[-5.90168881e-04]\n",
      " [-1.55269479e+01]]\n",
      "n=3, new x1:537663.9994098258, new y1: 4.472903304866042,\n",
      "information gain: -0.0006682611383839257, recall: 0.2883895131086142, filter rate: 0.49693628627955666\n",
      "new_gradIG:[[1.44021784e-10]\n",
      " [1.07493162e-04]]\n",
      "new_gradPenalty:[[1.85989763e-06]\n",
      " [2.23568437e-01]]\n",
      "new_grads:[[2.00391942e-09]\n",
      " [3.31061599e-04]]\n",
      "hessian matrix:[[2.64993487e+00 6.60079855e+05]\n",
      " [4.34086818e+04 1.73662590e+10]]\n",
      "********************************************************\n",
      "update_direction:[[-2.18527092e+02]\n",
      " [-5.74930149e+06]]\n",
      "n=4, new x1:537445.4723175156, new y1: -5749297.016296039,\n",
      "information gain: -0.0007503352533795443, recall: 0.30711610486891383, filter rate: 0.5294942471331707\n",
      "new_gradIG:[[1.88865120e-10]\n",
      " [1.10521504e-11]]\n",
      "new_gradPenalty:[[ 1.86065387e-06]\n",
      " [-1.73934308e-07]]\n",
      "new_grads:[[ 2.04951899e-09]\n",
      " [-1.62882158e-10]]\n",
      "hessian matrix:[[-2.86531824e+10 -1.14631121e+16]\n",
      " [-7.53846044e+14 -3.01586805e+20]]\n",
      "********************************************************\n",
      "update_direction:[[-1.86707772e+06]\n",
      " [-4.91215646e+10]]\n",
      "n=5, new x1:-1329632.2432819232, new y1: -49127313938.12941,\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "new_gradIG:[[-6.24060951e-10]\n",
      " [-1.41633222e-14]]\n",
      "new_gradPenalty:[[-7.52087658e-07]\n",
      " [-2.03552753e-11]]\n",
      "new_grads:[[-1.37614861e-09]\n",
      " [-3.45185975e-14]]\n",
      "hessian matrix:[[-8.64989776e+30 -3.46051433e+36]\n",
      " [-2.27573019e+35 -9.10438150e+40]]\n",
      "********************************************************\n",
      "update_direction:[[-1.31355646e+23]\n",
      " [-3.45587910e+27]]\n",
      "n=6, new x1:-1.3135564593205373e+23, new y1: -3.45587909850606e+27,\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "new_gradIG:[[-6.31706989e-27]\n",
      " [-2.01339791e-31]]\n",
      "new_gradPenalty:[[-7.61291982e-24]\n",
      " [-2.89361975e-28]]\n",
      "new_grads:[[-1.39299897e-26]\n",
      " [-4.90701766e-31]]\n",
      "hessian matrix:[[-3.44289921e+71 -1.37738068e+77]\n",
      " [-9.05803732e+75 -3.62379634e+81]]\n",
      "********************************************************\n",
      "update_direction:[[-7.23842681e+46]\n",
      " [-1.90438163e+51]]\n",
      "n=7, new x1:-7.238426813176372e+46, new y1: -1.9043816314269137e+51,\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "new_gradIG:[[-1.14635793e-50]\n",
      " [-3.65371082e-55]]\n",
      "new_gradPenalty:[[-1.38151566e-47]\n",
      " [-5.25104834e-52]]\n",
      "new_grads:[[-2.52787359e-50]\n",
      " [-8.90475915e-55]]\n",
      "hessian matrix:[[-6.42695383e+152 -2.57119407e+158]\n",
      " [-1.69088852e+157 -6.76463944e+162]]\n",
      "********************************************************\n",
      "update_direction:[[-2.45205166e+104]\n",
      " [-6.45118374e+108]]\n",
      "n=8, new x1:-2.452051656810966e+104, new y1: -6.451183737936555e+108,\n",
      "information gain: -1.4248889507878504e-07, recall: 1.0, filter rate: 0.9999807917635082\n",
      "new_gradIG:[[-3.38403472e-108]\n",
      " [-1.07857101e-112]]\n",
      "new_gradPenalty:[[-4.07821751e-105]\n",
      " [-1.55010311e-109]]\n",
      "new_grads:[[-7.46225223e-108]\n",
      " [-2.62867412e-112]]\n",
      "hessian matrix:[[-inf -inf]\n",
      " [-inf -inf]]\n",
      "********************************************************\n",
      "Early stopping!\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(928)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    print(f'initial  point x1:{x1}, y1:{y1}')\n",
    "    point = np.array([[x1], [y1]])\n",
    "    results = BFGSWithPenalty(point, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "61dac9ca-36d7-4a73-80a6-f8be75ac405c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration number</th>\n",
       "      <th>x1</th>\n",
       "      <th>y1</th>\n",
       "      <th>new x1</th>\n",
       "      <th>new y1</th>\n",
       "      <th>information gain</th>\n",
       "      <th>recall</th>\n",
       "      <th>filter rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>1.999994e+01</td>\n",
       "      <td>-8.846742e-05</td>\n",
       "      <td>0.074906</td>\n",
       "      <td>0.122241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>1.999994e+01</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>1.999985e+01</td>\n",
       "      <td>-8.846742e-05</td>\n",
       "      <td>0.074906</td>\n",
       "      <td>0.122241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>1.999985e+01</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>4.472903e+00</td>\n",
       "      <td>-6.682611e-04</td>\n",
       "      <td>0.288390</td>\n",
       "      <td>0.496936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>5.376640e+05</td>\n",
       "      <td>4.472903e+00</td>\n",
       "      <td>5.374455e+05</td>\n",
       "      <td>-5.749297e+06</td>\n",
       "      <td>-7.503353e-04</td>\n",
       "      <td>0.307116</td>\n",
       "      <td>0.529494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>5.374455e+05</td>\n",
       "      <td>-5.749297e+06</td>\n",
       "      <td>-1.329632e+06</td>\n",
       "      <td>-4.912731e+10</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>-1.329632e+06</td>\n",
       "      <td>-4.912731e+10</td>\n",
       "      <td>-1.313556e+23</td>\n",
       "      <td>-3.455879e+27</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>-1.313556e+23</td>\n",
       "      <td>-3.455879e+27</td>\n",
       "      <td>-7.238427e+46</td>\n",
       "      <td>-1.904382e+51</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8.0</td>\n",
       "      <td>-7.238427e+46</td>\n",
       "      <td>-1.904382e+51</td>\n",
       "      <td>-2.452052e+104</td>\n",
       "      <td>-6.451184e+108</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   iteration number            x1            y1         new x1         new y1  \\\n",
       "0               1.0  5.376640e+05  2.000000e+01   5.376640e+05   1.999994e+01   \n",
       "1               2.0  5.376640e+05  1.999994e+01   5.376640e+05   1.999985e+01   \n",
       "2               3.0  5.376640e+05  1.999985e+01   5.376640e+05   4.472903e+00   \n",
       "3               4.0  5.376640e+05  4.472903e+00   5.374455e+05  -5.749297e+06   \n",
       "4               5.0  5.374455e+05 -5.749297e+06  -1.329632e+06  -4.912731e+10   \n",
       "5               6.0 -1.329632e+06 -4.912731e+10  -1.313556e+23  -3.455879e+27   \n",
       "6               7.0 -1.313556e+23 -3.455879e+27  -7.238427e+46  -1.904382e+51   \n",
       "7               8.0 -7.238427e+46 -1.904382e+51 -2.452052e+104 -6.451184e+108   \n",
       "\n",
       "   information gain    recall  filter rate  \n",
       "0     -8.846742e-05  0.074906     0.122241  \n",
       "1     -8.846742e-05  0.074906     0.122241  \n",
       "2     -6.682611e-04  0.288390     0.496936  \n",
       "3     -7.503353e-04  0.307116     0.529494  \n",
       "4     -1.424889e-07  1.000000     0.999981  \n",
       "5     -1.424889e-07  1.000000     0.999981  \n",
       "6     -1.424889e-07  1.000000     0.999981  \n",
       "7     -1.424889e-07  1.000000     0.999981  "
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fab33b44-adf3-40d1-a7d4-78d1623e3acd",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 考慮recall\n",
    "老師提議的方式是利用 sigmoid 代替 indicator function\n",
    "$$min L(x, y)=-IG(x, y) \\times \\sigma(recall(x,y))$$\n",
    "將 sigmoid 平移到$\\sigma(0.8)\\approx 1$ <br>\n",
    "透過 product rule and chain rule，我們可以得到新的目標函數的一階微分為\n",
    "$$\\nabla L(x, y)= \\nabla -IG(x, y)\\times \\sigma(recall(x, y)) + -IG(x, y)\\times \\sigma^{\\prime}(recall(x, y)) \\times \\nabla recall(x,y)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "id": "06a52213-21a5-455c-870e-509cffa4b277",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientRecall(point, x_name, y_name, data):\n",
    "    x1 = float(point[0])\n",
    "    y1 = float(point[1])\n",
    "    \n",
    "    if pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).shape[0] < 0 or \\\n",
    "        pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).shape[0] < 0:\n",
    "        print('auxiliary point can not been found!')\n",
    "        \n",
    "        return np.array([[np.nan], [np.nan]])\n",
    "    \n",
    "    x2 = pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).sort_values(by= 0).iloc[auxiliary_point_select_behind_x, 0]\n",
    "    y2 = pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).sort_values(by= 0).iloc[auxiliary_point_select_behind_y, 0]\n",
    "    \n",
    "    delta_x = x2 - x1\n",
    "    delta_y = y2 - y1\n",
    "    \n",
    "    z = Recall(point, x_name, y_name, data)\n",
    "    z_delta_x = Recall(np.array([[x2], [y1]]), x_name, y_name, data)\n",
    "    z_delta_y = Recall(np.array([[x1], [x2]]), x_name, y_name, data)\n",
    "    \n",
    "    grad = np.array([[(z_delta_x - z) / delta_x], [(z_delta_y - z) / delta_y]])\n",
    "    return grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "id": "fb844e67-487b-4547-a8aa-b3158e41d352",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(x):\n",
    "    return 1.0 / (1 + np.exp(-(sigmoid_b + sigmoid_w * x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "2559e380-5cb9-472f-a85c-251771b3076f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoidDiff(x):\n",
    "    tmp = sigmoid(x)\n",
    "    return tmp * (1 - tmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "598e5952-dc68-4b7f-8bfc-2ec34ace094e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def BFGSWithRecall(point0, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', \\\n",
    "                                     'information gain', 'recall', 'filter rate'])\n",
    "    d = 2\n",
    "    gradIG = gradientIG(point0, x_name, y_name, data)\n",
    "    gradRecall = gradientRecall(point0, x_name, y_name, data)\n",
    "    gradPenalty = gradientPenalty(point0)\n",
    "    \n",
    "    recall = Recall(point0, x_name, y_name, data)\n",
    "    information_gain = informationGain(point0, x_name, y_name, data)\n",
    "    grads = gradIG * sigmoid(recall) + information_gain * sigmoidDiff(recall) * gradRecall + (gamma * gradPenalty)\n",
    "    \n",
    "    H = np.eye(d)\n",
    "    point = point0\n",
    "    n = 0\n",
    "    \n",
    "    while np.linalg.norm(grads) > 1e-50:\n",
    "        if n > N_max:\n",
    "            print(f'Maximum iteration reached!')\n",
    "            break\n",
    "        \n",
    "        n += 1\n",
    "        update_direction = -H @ grads\n",
    "        #step_size = lineSearch(point, update_direction, grads, data)\n",
    "        print(f'update_direction:{update_direction}')\n",
    "        new_point = point + (step_size * update_direction)\n",
    "\n",
    "        information_gain = informationGain(point, x_name, y_name, data)\n",
    "        recall, filter_rate = RecallFilterRate(point, x_name, y_name, data)\n",
    "        \n",
    "        print(f'n={n}, new x1:{float(new_point[0])}, new y1: {float(new_point[1])},\\ninformation gain: {information_gain}, recall: {recall}, filter rate: {filter_rate}')\n",
    "        \n",
    "        results = results.append({'iteration number': n, 'x1': float(point[0]), 'y1': float(point[1]), 'new x1': float(new_point[0]), \\\n",
    "                                 'new y1': float(new_point[1]), 'information gain': information_gain, 'recall': recall, \\\n",
    "                                 'filter rate': filter_rate}, ignore_index= True)        \n",
    "        \n",
    "        new_gradIG = gradientIG(new_point, x_name, y_name, data)\n",
    "        new_gradRecall = gradientRecall(new_point, x_name, y_name, data)\n",
    "        new_gradPenalty = gradientPenalty(new_point)\n",
    "        \n",
    "        if np.isnan(new_gradIG).all() == True or np.isnan(new_gradRecall).all() == True:\n",
    "            break\n",
    "        print(f'new_gradIG:{new_gradIG}')\n",
    "        print(f'new_gradRecall:{new_gradRecall}')\n",
    "        print(f'new_gradPenalty:{new_gradPenalty}')\n",
    "        \n",
    "        new_grads = gradIG * sigmoid(recall) + information_gain * sigmoidDiff(recall) * gradRecall + (gamma * gradPenalty)\n",
    "        print(f'new_grads:{new_gradIG}')\n",
    "        \n",
    "        y = new_grads - grads\n",
    "        y = y.reshape((-1, 1))\n",
    "        s = new_point - point\n",
    "        denominator = 1 / (y.T @ s)\n",
    "        li = np.eye(d) - (denominator * (s @ s.T))\n",
    "        ri = np.eye(d) - (denominator * (y @ y.T))\n",
    "        H = li @ H @ ri + (denominator * (s @ s.T))\n",
    "        print(f'hessian:{H}')\n",
    "        \n",
    "        grads = new_grads\n",
    "        point = new_point\n",
    "        print(f'*********' * 8)\n",
    "        \n",
    "    if np.linalg.norm(grads) < 1e-50:\n",
    "        print('Early stopping!')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "99951373-dcc4-441f-9ba4-6ac0e27934f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eps = 1e-1000\n",
    "N_max = 100\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "# number_x = 100\n",
    "# number_y = 100\n",
    "#step_size = np.array([[1e12], [1e6]])\n",
    "auxiliary_point_select_behind_x = 3\n",
    "auxiliary_point_select_behind_y = 3\n",
    "step_size = 1\n",
    "gamma = 0.01\n",
    "sigmoid_b = 0.8\n",
    "sigmoid_w = 5\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "id": "643ecea9-a6dd-45be-b497-52ec66c0f29c",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial  point x1:2044279.0, y1:14.0\n",
      "update_direction:[[-4.89170020e-09]\n",
      " [-7.02810297e-04]]\n",
      "n=1, new x1:2044278.999999995, new y1: 13.999297189703203,\n",
      "information gain: -3.2123708492114156e-05, recall: 0.033707865168539325, filter rate: 0.05881562013791514\n",
      "new_gradIG:[[0.]\n",
      " [0.]]\n",
      "new_gradRecall:[[0.        ]\n",
      " [0.01497776]]\n",
      "new_gradPenalty:[[4.89170020e-07]\n",
      " [7.14321574e-02]]\n",
      "new_grads:[[0.]\n",
      " [0.]]\n",
      "hessian:[[1.00000000e+00 6.95698902e-06]\n",
      " [0.00000000e+00 1.99821910e+00]]\n",
      "************************************************************************\n",
      "update_direction:[[-9.77243610e-09]\n",
      " [-1.40186791e-03]]\n",
      "n=2, new x1:2044278.9999999853, new y1: 13.997895321791312,\n",
      "information gain: -3.2123708492114156e-05, recall: 0.0449438202247191, filter rate: 0.06686387122798255\n",
      "new_gradIG:[[0.]\n",
      " [0.]]\n",
      "new_gradRecall:[[0.        ]\n",
      " [0.01497077]]\n",
      "new_gradPenalty:[[4.89170020e-07]\n",
      " [7.14393112e-02]]\n",
      "new_grads:[[0.]\n",
      " [0.]]\n",
      "hessian:[[ 1.00000000e+00 -5.08094281e-02]\n",
      " [ 0.00000000e+00 -7.28286566e+03]]\n",
      "************************************************************************\n",
      "update_direction:[[3.56311451e-05]\n",
      " [5.10795887e+00]]\n",
      "n=3, new x1:2044279.0000356166, new y1: 19.10585419255222,\n",
      "information gain: -3.2123708492114156e-05, recall: 0.0449438202247191, filter rate: 0.06686387122798255\n",
      "new_gradIG:[[0.]\n",
      " [0.]]\n",
      "new_gradRecall:[[0.        ]\n",
      " [0.00577069]]\n",
      "new_gradPenalty:[[4.89170020e-07]\n",
      " [5.23399786e-02]]\n",
      "new_grads:[[0.]\n",
      " [0.]]\n",
      "hessian:[[nan nan]\n",
      " [nan nan]]\n",
      "************************************************************************\n",
      "update_direction:[[nan]\n",
      " [nan]]\n",
      "n=4, new x1:nan, new y1: nan,\n",
      "information gain: -3.091179414128897e-05, recall: 0.02247191011235955, filter rate: 0.0387238047674843\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "index 0 is out of bounds for axis 0 with size 0",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [368]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124minitial  point x1:\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mx1\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, y1:\u001b[39m\u001b[38;5;132;01m{\u001b[39;00my1\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      6\u001b[0m point \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[x1], [y1]])\n\u001b[1;32m----> 7\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[43mBFGSWithRecall\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpoint\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_set\u001b[49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[1;32mIn [356]\u001b[0m, in \u001b[0;36mBFGSWithRecall\u001b[1;34m(point0, x_name, y_name, data)\u001b[0m\n\u001b[0;32m     31\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, new x1:\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mfloat\u001b[39m(new_point[\u001b[38;5;241m0\u001b[39m])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, new y1: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mfloat\u001b[39m(new_point[\u001b[38;5;241m1\u001b[39m])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m,\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124minformation gain: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00minformation_gain\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, recall: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mrecall\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, filter rate: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfilter_rate\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     33\u001b[0m results \u001b[38;5;241m=\u001b[39m results\u001b[38;5;241m.\u001b[39mappend({\u001b[38;5;124m'\u001b[39m\u001b[38;5;124miteration number\u001b[39m\u001b[38;5;124m'\u001b[39m: n, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mx1\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28mfloat\u001b[39m(point[\u001b[38;5;241m0\u001b[39m]), \u001b[38;5;124m'\u001b[39m\u001b[38;5;124my1\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28mfloat\u001b[39m(point[\u001b[38;5;241m1\u001b[39m]), \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnew x1\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28mfloat\u001b[39m(new_point[\u001b[38;5;241m0\u001b[39m]), \\\n\u001b[0;32m     34\u001b[0m                          \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnew y1\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28mfloat\u001b[39m(new_point[\u001b[38;5;241m1\u001b[39m]), \u001b[38;5;124m'\u001b[39m\u001b[38;5;124minformation gain\u001b[39m\u001b[38;5;124m'\u001b[39m: information_gain, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrecall\u001b[39m\u001b[38;5;124m'\u001b[39m: recall, \\\n\u001b[0;32m     35\u001b[0m                          \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfilter rate\u001b[39m\u001b[38;5;124m'\u001b[39m: filter_rate}, ignore_index\u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)        \n\u001b[1;32m---> 37\u001b[0m new_gradIG \u001b[38;5;241m=\u001b[39m \u001b[43mgradientIG\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnew_point\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     38\u001b[0m new_gradRecall \u001b[38;5;241m=\u001b[39m gradientRecall(new_point, x_name, y_name, data)\n\u001b[0;32m     39\u001b[0m new_gradPenalty \u001b[38;5;241m=\u001b[39m gradientPenalty(new_point)\n",
      "Input \u001b[1;32mIn [366]\u001b[0m, in \u001b[0;36mgradientIG\u001b[1;34m(point, x_name, y_name, data)\u001b[0m\n\u001b[0;32m     12\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauxiliary point can\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt be find\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     13\u001b[0m     \u001b[38;5;66;03m#return np.array([[np.nan], [np.nan]])\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m x2 \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43munique\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43mx_name\u001b[49m\u001b[43m]\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m>\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mx1\u001b[49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[43mx_name\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msort_values\u001b[49m\u001b[43m(\u001b[49m\u001b[43mby\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miloc\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[0;32m     16\u001b[0m y2 \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(np\u001b[38;5;241m.\u001b[39munique(data[data[y_name] \u001b[38;5;241m>\u001b[39m y1][y_name]))\u001b[38;5;241m.\u001b[39msort_values(by\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     18\u001b[0m delta_x \u001b[38;5;241m=\u001b[39m x2 \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mfloat\u001b[39m(point[\u001b[38;5;241m0\u001b[39m])\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:960\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    958\u001b[0m     key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(com\u001b[38;5;241m.\u001b[39mapply_if_callable(x, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m key)\n\u001b[0;32m    959\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_scalar_access(key):\n\u001b[1;32m--> 960\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_value\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtakeable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_takeable\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    961\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_tuple(key)\n\u001b[0;32m    962\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    963\u001b[0m     \u001b[38;5;66;03m# we by definition only have the 0th axis\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3613\u001b[0m, in \u001b[0;36mDataFrame._get_value\u001b[1;34m(self, index, col, takeable)\u001b[0m\n\u001b[0;32m   3611\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m takeable:\n\u001b[0;32m   3612\u001b[0m     series \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_ixs(col, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m-> 3613\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mseries\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_values\u001b[49m\u001b[43m[\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m]\u001b[49m\n\u001b[0;32m   3615\u001b[0m series \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_item_cache(col)\n\u001b[0;32m   3616\u001b[0m engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39m_engine\n",
      "\u001b[1;31mIndexError\u001b[0m: index 0 is out of bounds for axis 0 with size 0"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(111)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    print(f'initial  point x1:{x1}, y1:{y1}')\n",
    "    point = np.array([[x1], [y1]])\n",
    "    results = BFGSWithRecall(point, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e20782d-5af8-4754-ae2e-e820672958d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98256ccb",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## BFGS algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "90a4abe5-732b-4d18-97ea-02242791979d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "s1:[[6.83600000e+05]\n",
      " [1.99999596e+00]]\n",
      "y1:[[3.67400048e-11]\n",
      " [3.23838404e-06]]\n",
      "[[2.01226712e+16 1.86064039e+16]\n",
      " [4.43660532e+09 5.67263710e+05]]\n",
      "new x1:[1.49810198e+10], new y1:[14.36698439]\n",
      "[[1.000001e+05]\n",
      " [1.020000e+01]]\n",
      "30754\n",
      "<class 'float'>\n",
      "after<class 'float'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.00012866550378586028"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = 676400.0\n",
    "y1 = 14.00000404352353\n",
    "x2 = 1360000.0\n",
    "y2 = 16.0\n",
    "grad1 = np.array([[-1.65114619e-11], [-4.04352353e-06]])\n",
    "grad2 = np.array([[2.02285429e-11], [-8.05139487e-07]])\n",
    "d1 = np.eye(2)\n",
    "d2 = BFGS(x1, y1, x2, y2, grad2, grad1, x_name, y_name, d1)\n",
    "print(d2)\n",
    "data = train_set\n",
    "new_points = np.array([[x1], [y1]]) - d2 @ grad2\n",
    "print(f'new x1:{new_points[0]}, new y1:{new_points[1]}')\n",
    "new_points = np.array([[100000.1], [10.2]])\n",
    "print(new_points)\n",
    "idx1 = set(data[data[x_name] >= float(new_points[0])].index)\n",
    "idx2 = set(data[data[y_name] >= float(new_points[1])].index)\n",
    "\n",
    "\n",
    "print(len(z))\n",
    "informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "fdd8db28",
   "metadata": {},
   "outputs": [],
   "source": [
    "def BFGS(x1, y1, x2, y2, grad2, grad1, x_name, y_name, d1):\n",
    "    s1 = np.array([[x2 - x1], [y2 - y1]])\n",
    "    grady = grad2 - grad1\n",
    "    print(f's1:\\n{s1}')\n",
    "    print(f'y1:\\n{grady}')\n",
    "    \n",
    "    d2 = (np.eye(2) - (s1 @ np.transpose(grady)) / (np.transpose(grady) @ s1)) @ d1 @ (np.eye(2) - (grady @ np.transpose(s1)) / (np.transpose(grady) @ s1)) + (s1 @ np.transpose(s1)) / (np.transpose(grady) @ s1)\n",
    "    \n",
    "    return d2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e20cf580",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientIG(x1, y1, x2, y2, x_name, y_name, data):\n",
    "    delta_x = x2 - x1\n",
    "    delta_y = y2 - y1\n",
    "    \n",
    "    z = informationGain(x1, y1, x_name, y_name, data)\n",
    "    z_delta_x = informationGain(x1 + delta_x, y1, x_name, y_name, data)\n",
    "    z_delta_y = informationGain(x1, y1 + delta_y, x_name, y_name, data)\n",
    "    \n",
    "    #grad = np.array([(z_delta_x - z) / delta_x, (z_delta_y - z) / delta_y])\n",
    "    grad = np.array([[(z_delta_x - z) / delta_x], [(z_delta_y - z) / delta_y]])\n",
    "    return grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "5fc997b5-3ff4-4578-8d24-b3432ba9c2ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientRecall(x1, y1, x2, y2, x_name, y_name, data):\n",
    "    delta_x = x2 - x1\n",
    "    delta_y = y2 - y1\n",
    "    \n",
    "    z = Recall(x1, y1, x_name, y_name, data)\n",
    "    z_delta_x = Recall(x1 + delta_x, y1, x_name, y_name, data)\n",
    "    z_delta_y = Recall(x1, y1 + delta_y, x_name, y_name, data)\n",
    "    \n",
    "    grad = np.array([[(z_delta_x - z) / delta_x], [(z_delta_y - z) / delta_y]])\n",
    "    return grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "a203e98c-4fed-4fb3-ab3f-440d55ebf182",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Recall(x_thre, y_thre, x_name, y_name, data):\n",
    "    idx1 = set(data[data[x_name] > x_thre].index)\n",
    "    idx2 = set(data[data[y_name] > y_thre].index)\n",
    "    idx = list(idx1 & idx2)\n",
    "    \n",
    "    new_sam_1 = data.iloc[idx]\n",
    "    new_sam_0 = data.drop(index= new_sam_1.index)\n",
    "    \n",
    "    if len(set(new_sam_1.index) & set(new_sam_0.index)) != 0:\n",
    "        raise ValueError('new sam 1 and new sam 0 are overlapped')\n",
    "    \n",
    "    TP = new_sam_1[new_sam_1[SAR_type] != 0].shape[0]\n",
    "    TN = new_sam_0[new_sam_0[SAR_type] == 0].shape[0]\n",
    "    FP = new_sam_1[new_sam_1[SAR_type] == 0].shape[0]\n",
    "    FN = new_sam_0[new_sam_0[SAR_type] != 0].shape[0]\n",
    "    \n",
    "    return -(TP / (TP + FN))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "1dfac68e-3bcb-4aee-8d2e-b792a9ce7e7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def auxiliaryPoint(point, feature, number, data):\n",
    "    delta = (data[feature].max() - data[feature].min()) / number\n",
    "    \n",
    "    return point + delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "40cca4e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def NewtonBFGS(x1, y1, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', 'information gain', 'recall', 'filter rate'])\n",
    "    n = int(1)\n",
    "    d2 = np.eye(2)\n",
    "    d1 = np.zeros((2,2))\n",
    "    x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "    y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "    # x2 = pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).sort_values(by= 0)[0]\n",
    "    # y2 = pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).sort_values(by= 0)[0]\n",
    "    \n",
    "    print(f'x1:{x1}, y1:{y1}')\n",
    "    print(f'x2:{x2}, y2:{y2}')\n",
    "    \n",
    "    grad2 = gradientIG(x1, y1, x2, y2, x_name, y_name, data) \n",
    "    print(f'gradient:\\n{grad2}')\n",
    "    print(f'Dk:\\n{d2}')\n",
    "    print(f'd2 @ grad2:\\n{(d2 @ grad2)}')\n",
    "    new_points = np.array([[x1], [y1]]) - step_size * (d2 @ grad2)\n",
    "    \n",
    "    information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    \n",
    "    print(f'iteration number:{n}, new x1:{float(new_points[0])}, new y1:{float(new_points[1])}, information gain:{information_gain}, recall:{recall}\\n' + '------'*8)\n",
    "    \n",
    "    results = results.append({'iteration number': n, 'x1':x1, 'y1':y1, 'new x1': float(new_points[0]),'new y1': float(new_points[1]), 'information gain':information_gain, \\\n",
    "                                'recall':recall, 'filter rate': filter_rate}, ignore_index= True)    \n",
    "    \n",
    "    x1 = float(new_points[0])\n",
    "    y1 = float(new_points[1])\n",
    "    grad1 = grad2\n",
    "    d1 = d2\n",
    "    n += 1\n",
    "    \n",
    "    while n < N_max:\n",
    "        print(f'x1:{x1}, y1:{y1}')\n",
    "        x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "        y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "        # x2 = pd.DataFrame(np.unique(data[data[x_name] > x1][x_name])).sort_values(by= 0)[0]\n",
    "        # y2 = pd.DataFrame(np.unique(data[data[y_name] > y1][y_name])).sort_values(by= 0)[0]\n",
    "        \n",
    "        \n",
    "        print(f'x2:{x2}, y2:{y2}')\n",
    "        \n",
    "        grad2 = gradientIG(x1, y1, x2, y2, x_name, y_name, data)\n",
    "        d2 = BFGS(x1, y1, x2, y2, grad2, grad1, x_name, y_name, d1)\n",
    "        \n",
    "        print(f'gradient:\\n{grad2}')\n",
    "        print(f'Dk:\\n{d2}')\n",
    "        \n",
    "        if np.linalg.det(d2) == 0:\n",
    "            raise ValueError('hessian matirx is singular matrix, can not invertible')\n",
    "        print(f'd2 @ grad2:\\n{step_size * (d2 @ grad2)}')\n",
    "        new_points = np.array([[x1], [y1]]) - step_size * (d2 @ grad2)\n",
    "    \n",
    "        information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "        recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data) \n",
    "        results = results.append({'iteration number':n, 'x1':x1, 'y1':y1, 'new x1': float(new_points[0]), 'new y1': float(new_points[1]), 'information gain':information_gain, \\\n",
    "                            'recall':recall, 'filter rate': filter_rate}, ignore_index= True)\n",
    "        \n",
    "        print(f'iteration number:{n}, new x1:{float(new_points[0])}, new y1:{float(new_points[1])}, information gain:{information_gain}, recall:{recall}\\n' + '------'*8)\n",
    "        \n",
    "        if np.linalg.norm(grad2, 2) < eplison:\n",
    "            print(f'Early stopping' + '------' * 8 + f'\\nisteration number: {n} new x1:{float(new_points[0])}, new y1:{float(new_points[1])}')\n",
    "            break\n",
    "            \n",
    "        x1 = float(new_points[0])\n",
    "        y1 = float(new_points[1])\n",
    "        grad1 = grad2\n",
    "        d1 = d2\n",
    "        n += 1\n",
    "    \n",
    "    print('Finish' + '------' * 8 + f'\\niteration number:{n} new x1:{x1}, new y1:{y1}')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "0ab66f56-5075-42b3-900a-0796fd8eebb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eplison = 1e-1000\n",
    "N_max = 100\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "number_x = 100\n",
    "number_y = 100\n",
    "step_size = 1\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "ff137f56-daba-4270-b559-c73bcb01a86f",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1:537664.0, y1:20.0\n",
      "x2:769809.0, y2:28.52\n",
      "gradient:\n",
      "[[1.26668611e-11]\n",
      " [4.83966295e-06]]\n",
      "Dk:\n",
      "[[1. 0.]\n",
      " [0. 1.]]\n",
      "d2 @ grad2:\n",
      "[[1.26668611e-11]\n",
      " [4.83966295e-06]]\n",
      "iteration number:1, new x1:537664.0, new y1:19.999995160337047, information gain:-8.846741616871934e-05, recall:0.0749063670411985\n",
      "------------------------------------------------\n",
      "x1:537664.0, y1:19.999995160337047\n",
      "x2:769809.0, y2:28.519995160337047\n",
      "s1:\n",
      "[[2.32145e+05]\n",
      " [8.52000e+00]]\n",
      "y1:\n",
      "[[0.]\n",
      " [0.]]\n",
      "gradient:\n",
      "[[1.26668611e-11]\n",
      " [4.83966295e-06]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:2, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:3, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:4, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:5, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:6, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:7, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:8, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:9, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:10, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:11, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:12, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:13, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:14, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:15, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:16, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:17, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:18, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:19, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:20, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:21, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:22, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:23, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:24, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:25, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:26, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:27, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:28, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:29, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:30, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:31, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:32, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:33, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:34, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:35, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:36, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:37, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:38, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:39, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:40, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:41, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:42, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:43, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:44, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:45, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:46, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:47, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:48, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:49, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:50, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:51, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:52, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:53, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:54, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:55, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:56, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:57, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:58, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:59, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:60, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:61, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:62, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:63, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:64, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:65, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:66, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:67, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:68, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:69, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:70, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:71, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:72, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:73, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:74, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:75, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:76, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:77, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:78, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:79, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:80, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:81, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:82, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:83, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:84, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:85, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:86, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:87, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:88, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:89, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:90, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:91, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:92, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:93, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:94, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:95, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:96, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:97, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:98, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x1:nan, y1:nan\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:99, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "Finish------------------------------------------------\n",
      "iteration number:100 new x1:nan, new y1:nan\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(928)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    #print(f'x1:{x1}, y1:{y1}')\n",
    "    results = NewtonBFGS(x1, y1, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "35899e3d-d6f3-43ae-bbb5-6d9ed37661e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration number</th>\n",
       "      <th>x1</th>\n",
       "      <th>y1</th>\n",
       "      <th>new x1</th>\n",
       "      <th>new y1</th>\n",
       "      <th>information gain</th>\n",
       "      <th>recall</th>\n",
       "      <th>filter rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>537664.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>537664.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>-8.846742e-05</td>\n",
       "      <td>0.074906</td>\n",
       "      <td>0.122241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>537664.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>312464.637523</td>\n",
       "      <td>11.734913</td>\n",
       "      <td>-1.173652e-04</td>\n",
       "      <td>0.176030</td>\n",
       "      <td>0.250091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>312464.637523</td>\n",
       "      <td>11.734913</td>\n",
       "      <td>-710722.976455</td>\n",
       "      <td>-25.817300</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-710722.976455</td>\n",
       "      <td>-25.817300</td>\n",
       "      <td>-710722.976455</td>\n",
       "      <td>-25.817300</td>\n",
       "      <td>-1.424889e-07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   iteration number             x1         y1         new x1     new y1  \\\n",
       "0               1.0  537664.000000  20.000000  537664.000000  20.000000   \n",
       "1               2.0  537664.000000  20.000000  312464.637523  11.734913   \n",
       "2               3.0  312464.637523  11.734913 -710722.976455 -25.817300   \n",
       "3               4.0 -710722.976455 -25.817300 -710722.976455 -25.817300   \n",
       "\n",
       "   information gain    recall  filter rate  \n",
       "0     -8.846742e-05  0.074906     0.122241  \n",
       "1     -1.173652e-04  0.176030     0.250091  \n",
       "2     -1.424889e-07  1.000000     0.999981  \n",
       "3     -1.424889e-07  1.000000     0.999981  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a33a3051-e0b0-4576-b72f-57f903f0185a",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## 考慮 recall 更新方向"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "18b9c216-dc3e-4cf2-86c5-a214fa549874",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3087562035.py, line 40)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [118]\u001b[1;36m\u001b[0m\n\u001b[1;33m    `a\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def NewtonBFGSRecall(x1, y1, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', 'information gain', 'recall', 'filter rate'])\n",
    "    n = int(1)\n",
    "    d2 = np.eye(2)\n",
    "    d1 = np.zeros((2,2))\n",
    "    x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "    y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "    print(f'x1:{x1}, y1:{y1}')\n",
    "    print(f'x2:{x2}, y2:{y2}')\n",
    "    \n",
    "    grad2 = gradientRecall(x1, y1, x2, y2, x_name, y_name, data) \n",
    "    print(f'gradient:\\n{grad2}')\n",
    "    print(f'Dk:\\n{d2}')\n",
    "    \n",
    "    new_points = np.array([[x1], [y1]]) - step_size * (d2 @ grad2)\n",
    "    \n",
    "    \n",
    "    information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    \n",
    "    results = results.append({'iteration number': n, 'x1':x1, 'y1':y1, 'new x1': float(new_points[0]), 'new_y1': float(new_points[1]), 'information gain':information_gain, \\\n",
    "                                'recall':recall, 'filter rate': filter_rate}, ignore_index= True)    \n",
    "    \n",
    "    print(f'iteration number:{n}, new x1:{float(new_points[0])}, new y1:{float(new_points[1])}, information gain:{information_gain}, recall:{recall}\\n' + '------'*8)\n",
    "    \n",
    "    x1 = float(new_points[0])\n",
    "    y1 = float(new_points[1])\n",
    "    grad1 = grad2\n",
    "    d1 = d2\n",
    "    n += 1\n",
    "    \n",
    "    while n < N_max:\n",
    "        x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "        y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "        \n",
    "        print(f'x2:{x2}, y2:{y2}')\n",
    "        \n",
    "        grad2 = gradientRecall(x1, y1, x2, y2, x_name, y_name, data)\n",
    "        print(f'gradient:\\n{grad2}')\n",
    "        `a\n",
    "        d2 = BFGS(x1, y1, x2, y2, grad2, grad1, x_name, y_name, d1)\n",
    "        \n",
    "        print(f'Dk:\\n{d2}')\n",
    "        print(f'd2 @ grad2:\\n{(d2 @ grad2)}')\n",
    "        \n",
    "        if np.linalg.det(d2) == 0:\n",
    "            raise ValueError('hessian matirx is singular matrix, can not invertible')\n",
    "            \n",
    "        print(f'd2 @ grad2:\\n{d2 @ grad2}')\n",
    "        new_points = np.array([[x1], [y1]]) - step_size * (d2 @ grad2)\n",
    "    \n",
    "        information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "        recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data) \n",
    "        results = results.append({'iteration number':n, 'x1':x1, 'y1':y1, 'new x1': float(new_points[0]), 'new_y1': float(new_points[1]), 'information gain':information_gain, \\\n",
    "                            'recall':recall, 'filter rate': filter_rate}, ignore_index= True)\n",
    "        \n",
    "        if np.linalg.norm(grad2, 2) < eplison:\n",
    "            print(f'Early stopping' + '------' * 8 + f'\\nisteration number: {n} new x1:{float(new_points[0])}, new y1:{float(new_points[1])}')\n",
    "            break\n",
    "        \n",
    "        print(f'iteration number:{n}, new x1:{float(new_points[0])}, new y1:{float(new_points[1])}, information gain:{information_gain}, recall:{recall}\\n' + '------'*8)\n",
    "        \n",
    "        x1 = float(new_points[0])\n",
    "        y1 = float(new_points[1])\n",
    "        grad1 = grad2\n",
    "        d1 = d2\n",
    "        n += 1\n",
    "    \n",
    "    print('Finish' + '------' * 8 + f'\\niteration number:{n} new x1:{x1}, new y1{y1}')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "14ea6772-46b3-495b-8e45-66a3c98d8af2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eplison = 1e-100\n",
    "N_max = 10\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "number_x = 10\n",
    "number_y = 100\n",
    "step_size = 1\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "182970f5-9578-4de3-8bf5-e71f82a46804",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1:537664.0, y1:20.0\n",
      "x2:2859114.0, y2:28.52\n",
      "gradient:\n",
      "[[2.74270012e-08]\n",
      " [4.83550491e-03]]\n",
      "Dk:\n",
      "[[1. 0.]\n",
      " [0. 1.]]\n",
      "iteration number:1, new x1:537663.9999999725, new y1:19.99516449508537, information gain:-8.846741616871934e-05, recall:0.0749063670411985\n",
      "------------------------------------------------\n",
      "x2:2859113.9999999725, y2:28.51516449508537\n",
      "s1:\n",
      "[[2.32145e+06]\n",
      " [8.52000e+00]]\n",
      "y1:\n",
      "[[0.]\n",
      " [0.]]\n",
      "gradient:\n",
      "[[2.74270012e-08]\n",
      " [4.83550491e-03]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:2, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:3, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:4, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:5, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:6, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:7, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:8, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "x2:nan, y2:nan\n",
      "s1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "y1:\n",
      "[[nan]\n",
      " [nan]]\n",
      "gradient:\n",
      "[[nan]\n",
      " [nan]]\n",
      "Dk:\n",
      "[[nan nan]\n",
      " [nan nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "d2 @ grad2:\n",
      "[[nan]\n",
      " [nan]]\n",
      "iteration number:9, new x1:nan, new y1:nan, information gain:-0.0, recall:0.0\n",
      "------------------------------------------------\n",
      "Finish------------------------------------------------\n",
      "iteration number:10 new x1:nan, new y1nan\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(928)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    #print(f'x1:{x1}, y1:{y1}')\n",
    "    results = NewtonBFGSRecall(x1, y1, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d7b7ebe-53f7-4619-81e3-35158a25c9bd",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## 考慮 Recall 和 informationGain更新方向"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6e31fd35-ec09-496e-88fd-81d08c9f4a4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def IGRecallweight(x):\n",
    "    return 1.0 / (1 + np.exp(-(b + w * x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "18021945-aee3-456d-a905-e1fe53336bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def NewtonBFGSRecall(x1, y1, x_name, y_name, data):\n",
    "    results = pd.DataFrame(columns= ['iteration number', 'x1', 'y1', 'new x1', 'new y1', 'information gain', 'recall', 'filter rate'])\n",
    "    n = 1\n",
    "    recall = 0\n",
    "    d2IG, d2Recall = np.eye(2), np.eye(2)\n",
    "    d1IG, d1Recall = np.zeros((2,2)), np.zeros((2, 2))\n",
    "    \n",
    "    x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "    y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "    \n",
    "    print(f'x1:{x1}, y1:{y1}')\n",
    "    print(f'x2:{x2}, y2:{y2}')\n",
    "    \n",
    "    gradIG2 = gradientIG(x1, y1, x2, y2, x_name, y_name, data) \n",
    "    gradRecall2 = gradientRecall(x1, y1, x2, y2, x_name, y_name, data)\n",
    "    \n",
    "    print(f'gradIG2:\\n{gradIG2}')\n",
    "    print(f'gradRecall2:\\n{gradRecall2}')\n",
    "    \n",
    "    alpha = IGRecallweight(recall)\n",
    "    new_points = np.array([[x1], [y1]]) - alpha * (d2IG @ gradIG2) - (1 - alpha)* (d2Recall @ gradRecall2)\n",
    "    \n",
    "    information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "    \n",
    "    results = results.append({'iteration number': n, 'x1':x1, 'y1':y1, 'new x1': new_points[0], 'new_y1': new_points[1], 'information gain':information_gain, \\\n",
    "                                'recall':recall, 'filter rate': filter_rate}, ignore_index= True)    \n",
    "    \n",
    "    x1 = new_points.item(0)\n",
    "    y1 = new_points.item(1)\n",
    "    print(f'iteration number:{n}, new x1:{float(new_points[0])}, new y1:{float(new_points[1])}, recall:{recall}\\n' + '------'*8)\n",
    "    \n",
    "    gradIG1 = gradIG2\n",
    "    gradRecall1 = gradRecall2\n",
    "    \n",
    "    d1IG = d2IG\n",
    "    d1Recall = d2Recall\n",
    "    n += 1\n",
    "    \n",
    "    while n < N_max:\n",
    "        x2 = auxiliaryPoint(x1, x_name, number_x, train_set)\n",
    "        y2 = auxiliaryPoint(y1, y_name, number_y, train_set)\n",
    "        \n",
    "        print(f'x2:{x2}, y2:{y2}')\n",
    "        \n",
    "        gradIG2 = gradientIG(x1, y1, x2, y2, x_name, y_name, data)\n",
    "        gradRecall2 = gradientRecall(x1, y1, x2, y2, x_name, y_name, data)\n",
    "        \n",
    "        d2IG = BFGS(x1, y1, x2, y2, gradIG2, gradIG1, x_name, y_name, d1IG)\n",
    "        d2Recall = BFGS(x1, y1, x2, y2, gradRecall2, gradRecall1, x_name, y_name, d1Recall)\n",
    "        \n",
    "        print(f'd2IG:\\n{d2IG}\\nd2Recall:\\n{d2Recall}')\n",
    "        \n",
    "        if np.linalg.det(d2IG) == 0 or np.linalg.det(d2Recall) == 0:\n",
    "            raise ValueError('hessian matirx is singular matrix, can not invertible')\n",
    "                   \n",
    "        print(f'd2IG @ gradIG2:\\n{d2IG @ gradIG2}')\n",
    "        print(f'd2Recall @ gradRecall:\\n{d2Recall @ gradRecall2}')\n",
    "        \n",
    "        alpha = IGRecallweight(recall)\n",
    "        print(f'alpha:{alpha}')\n",
    "        new_points = np.array([[x1], [y1]]) - alpha * (d2IG @ gradIG2) - (1 - alpha) * (d2Recall @ gradRecall2)\n",
    "           \n",
    "        information_gain = informationGain(float(new_points[0]), float(new_points[1]), x_name, y_name, data)\n",
    "        recall, filter_rate = recallFilterRate(float(new_points[0]), float(new_points[1]), x_name, y_name, data) \n",
    "        results = results.append({'iteration number':n, 'x1':x1, 'y1':y1, 'new x1': new_points[0], 'new_y1': new_points[1], 'information gain':information_gain, \\\n",
    "                            'recall':recall, 'filter rate': filter_rate}, ignore_index= True)\n",
    "        print(f'iteration number:{n}, new x1:{new_points[0]}, new y1:{new_points[1]}, recall:{recall}\\n' + '------'*8)\n",
    "        \n",
    "        if np.linalg.norm(gradIG2, 2) < eplison or np.linalg.norm(gradRecall2, 2) < eplison:\n",
    "            print(f'Early stopping' + '------' * 8 + f'\\nisteration number: {n} new x1:{new_points.item(0)}, new y1:{new_points.item(1)}')\n",
    "            break\n",
    "            \n",
    "        x1 = float(new_points[0])\n",
    "        y1 = float(new_points[1])\n",
    "        \n",
    "        gradIG1 = gradIG2\n",
    "        gradRecall1 = gradRecall2\n",
    "    \n",
    "        d1IG = d2IG\n",
    "        d1Recall = d2Recall\n",
    "        \n",
    "        n += 1\n",
    "    \n",
    "    print('Finish' + '------' * 8 + f'\\niteration number:{n} new x1:{x1}, new y1{y1}')\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f3023fd7-21f4-47e9-991e-d4144d6f9e66",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameter\n",
    "SAR_type = 'TO_SAR'\n",
    "eplison = 1e-100\n",
    "N_max = 10\n",
    "x_name = 'Credit_Amt'\n",
    "y_name = 'number_of_Credit'\n",
    "#learning_rate = 1e-100\n",
    "# x_array = np.unique(train_set[x_name].dropna())\n",
    "# y_array = np.unique(train_set[y_name].dropna())\n",
    "number_x = 100\n",
    "number_y = 100\n",
    "step_size = 1\n",
    "b = 0.8\n",
    "w = 5\n",
    "father_entropy = Entropy(train_set, SAR_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "02542fc0-3082-4bee-9c96-6ab126ecd568",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'NewtonBFGSRecall' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [355]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m y1 \u001b[38;5;241m=\u001b[39m intialPoint(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnumber_of_Credit\u001b[39m\u001b[38;5;124m'\u001b[39m, train_set)\n\u001b[0;32m      5\u001b[0m \u001b[38;5;66;03m#print(f'x1:{x1}, y1:{y1}')\u001b[39;00m\n\u001b[1;32m----> 6\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[43mNewtonBFGSRecall\u001b[49m(x1, y1, x_name, y_name, train_set)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'NewtonBFGSRecall' is not defined"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    np.random.seed(928)\n",
    "    x1 = intialPoint('Credit_Amt', train_set)\n",
    "    y1 = intialPoint('number_of_Credit', train_set)\n",
    "    #print(f'x1:{x1}, y1:{y1}')\n",
    "    results = NewtonBFGSRecall(x1, y1, x_name, y_name, train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "49f574ac-f7c4-4d8c-83c9-43c48803f36f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration number</th>\n",
       "      <th>x1</th>\n",
       "      <th>y1</th>\n",
       "      <th>new x1</th>\n",
       "      <th>new y1</th>\n",
       "      <th>information gain</th>\n",
       "      <th>recall</th>\n",
       "      <th>filter rate</th>\n",
       "      <th>new_y1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>537664.0</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>[537664.0]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.074906</td>\n",
       "      <td>0.114673</td>\n",
       "      <td>[20.001502469164105]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>537664.0</td>\n",
       "      <td>20.001502</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nan]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  iteration number        x1         y1      new x1 new y1  information gain  \\\n",
       "0                1  537664.0  20.000000  [537664.0]    NaN          0.000065   \n",
       "1                2  537664.0  20.001502       [nan]    NaN          0.000000   \n",
       "2                3       NaN        NaN       [nan]    NaN          0.000000   \n",
       "3                4       NaN        NaN       [nan]    NaN          0.000000   \n",
       "4                5       NaN        NaN       [nan]    NaN          0.000000   \n",
       "5                6       NaN        NaN       [nan]    NaN          0.000000   \n",
       "6                7       NaN        NaN       [nan]    NaN          0.000000   \n",
       "7                8       NaN        NaN       [nan]    NaN          0.000000   \n",
       "8                9       NaN        NaN       [nan]    NaN          0.000000   \n",
       "\n",
       "     recall  filter rate                new_y1  \n",
       "0  0.074906     0.114673  [20.001502469164105]  \n",
       "1  0.000000     0.000000                 [nan]  \n",
       "2  0.000000     0.000000                 [nan]  \n",
       "3  0.000000     0.000000                 [nan]  \n",
       "4  0.000000     0.000000                 [nan]  \n",
       "5  0.000000     0.000000                 [nan]  \n",
       "6  0.000000     0.000000                 [nan]  \n",
       "7  0.000000     0.000000                 [nan]  \n",
       "8  0.000000     0.000000                 [nan]  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.tail(10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
